=pod

=head1 NAME

MojoX::XML - XML generator based on Mojo::DOM


=head1 SYNOPSIS

  use MojoX::XML;

  # Create new dcument with root node
  my $xml = MojoX::XML->new('env');

  # Add elements to the document
  my $header = $xml->add('header');

  # Nest elements
  $header->add('greetings')->add(title => 'Hello!');

  # Append elements
  $xml->add('body' => { date => 'today' })->add(p => "That's all!");

  # Use CSS3 selectors for element traversal
  $xml->at('title')->attrs(style => 'color: red');

  # Attach comments to elements
  $xml->at('greetings')->comment('My Greeting');

  # Print with pretty indentation
  print $xml->to_pretty_xml;

  # <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  # <env>
  #   <header>
  #
  #       <!-- My Greeting -->
  #       <greetings>
  #         <title style="color: red">Hello!</title>
  #       </greetings>
  #     </header>
  #     <body date="today">
  #       <p>That&#39;s all!</p>
  #     </body>
  #   </env>


=head1 DESCRIPTION

L<MojoX::XML> allows for the simple creation
of serialized XML documents with multiple namespaces and
pretty printing, while giving you the full power of L<Mojo::DOM>
element traversal.


=head1 METHODS

L<MojoX::XML> inherits all methods from
L<Mojo::DOM> and implements the following new ones.


=head2 new

  my $xml = MojoX::XML->new(<<'EOF');
  <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  <entry>
    <fun>Yeah!</fun>
  <entry>
  EOF

  $xml = MojoX::XML->new('Document');
  $xml = MojoX::XML->new(Document => { foo => 'bar' });
  my $xml_new = $xml->new(Document => {id => 'new'} => 'My Content');

Construct a new L<MojoX::XML> document.
Accepts either all parameters supported by L<Mojo::DOM> or
all parameters supported by L<add|/add>.


=head2 add

  my $xml = MojoX::XML->new('Document');
  $xml->add('Element');

  my $elem = $xml->add(Element => { type => 'text/plain' });
  $elem->add(Child => 'I\'m a child element');

  $xml->add(Text => { type => 'text/plain' }, 'Hello World!');
  $xml->add(Text => 'Hello World!', 'This is a comment!');
  $xml->add(EmptyElement => undef, 'This is an empty element!');
  $xml->add(Data => { -type => 'armour' }, 'PdGzjvj..');

  $elem = $xml->new(Element => 'Hello World!');
  $xml->add($elem);

Add a new element to a L<MojoX::XML> document, either
as another L<MojoX::XML> object or newly defined.
Returns the root node of the added L<MojoX::XML>
document.

Parameters to define elements are a tag name,
followed by an optional hash reference
including all attributes of the XML element,
an optional text content,
and an optional comment on the element.
If the comment should be introduced without text content,
text content has to be C<undef>.

For rendering element content, special C<-type> attributes
can be defined:

=over 2

=item C<escape>

XML escape the content of the node.

  my $xml = MojoX::XML->new('feed');
  my $html = $xml->add('html' => { -type => 'escape' });
  $html->add(h1 => { style => 'color: red' } => 'I start blogging!');
  $html->add(p => 'What a great idea!')->comment('First post');

  print $xml->to_pretty_xml;

  # <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  # <feed>
  #   <html>
  #     &lt;h1 style=&quot;color: red&quot;&gt;I start blogging!&lt;/h1&gt;
  #
  #     &lt;!-- First post --&gt;
  #     &lt;p&gt;What a great idea!&lt;/p&gt;
  #   </html>
  # </feed>

=item C<raw>

Treat children as raw data (no pretty printing).

  my $plain = MojoX::XML->new(<<'PLAIN');
  <entry>There is <b>no</b> pretty printing</entry>
  PLAIN

  my $xml = MojoX::XML->new('entry');
  my $text = $xml->add('text' => { -type => 'raw' });
  $text->add($plain);

  print $xml->to_pretty_xml;

  # <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  # <entry>
  #   <text><entry>There is <b>no</b> pretty printing</entry>
  # </text>
  # </entry>


=item C<armour:n>

Indent the content and automatically
introduce linebreaks after every
C<n>th character.
Intended for base64 encoded data.
Defaults to 60 characters linewidth after indentation.

  my $xml = MojoX::XML->new('entry');
  my $data =
     $xml->add(
       data => {
	 type  => 'text/plain',
	 -type => 'armour:30'
       } => <<'B64');
    VGhpcyBpcyBqdXN0IGEgdGVzdCBzdHJpbmcgZm
    9yIHRoZSBhcm1vdXIgdHlwZS4gSXQncyBwcmV0
    dHkgbG9uZyBmb3IgZXhhbXBsZSBpc3N1ZXMu
  B64

  $data->comment('This is base64 data!');

  print $xml->to_pretty_xml;

  # <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  # <entry>
  #
  #   <!-- This is base64 data! -->
  #   <data type="text/plain">
  #     VGhpcyBpcyBqdXN0IGEgdGVzdCBzdH
  #     JpbmcgZm9yIHRoZSBhcm1vdXIgdHlw
  #     ZS4gSXQncyBwcmV0dHkgbG9uZyBmb3
  #     IgZXhhbXBsZSBpc3N1ZXMu
  #   </data>
  # </entry>

=back


=head2 comment

  $node = $node->comment('Resource Descriptor');

Prepend a comment to the current node.
If a node already has a comment, comments will be merged.


=head2 set

  my $xml = MojoX::XML->new('Document');
  $xml->set('Element' => { id => 5 });

  # Overwrite
  $xml->set('Element' => { id => 6 });

Adds a new element as a child to the node - only once.
Accepts all parameters as defined in L<add|/add>,
without accepting L<MojoX::XML> objects.

If one or more elements with the same tag name are
already children of the requesting node,
the old elements will be overwritten and
comments will be merged.


=head2 to_pretty_xml

  print $xml->to_pretty_xml;
  print $xml->to_pretty_xml(2);

Returns a stringified, pretty printed XML document.
Optionally accepts a numerical parameter,
defining the start of indentation (defaults to 0).


=head1 ATTRIBUTES

=head2 extension

  my $nr = $xml->extension('Fun', 'MojoX::XML::Atom');
  my @extensions = $xml->extension;

Add or get an array of extensions.
When adding, returns the number of successfully added extensions.
When getting, returns the array of associated extensions.
See L<Extensions|/Extensions> for further information.


=head2 namespace

  my $xml = MojoX::XML->new('doc');
  $xml->namespace('http://sojolicio.us/ns/global');
  $xml->namespace(fun => 'http://sojolicio.us/ns/fun');
  $xml->add('fun:test' => { foo => 'bar' }, 'Works!');
  print $xml->namespace;

  print $xml->to_pretty_xml;

  # <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  # <doc xmlns="http://sojolicio.us/global"
  #      xmlns:fun="http://sojolicio.us/fun">
  #   <fun:test foo="bar">Works!</fun:test>
  # </doc>

Get the namespace of the node or
add namespace information to the node's root.
On adding, the first parameter gives the prefix, the second one
the namespace. The prefix parameter is optional.
Namespaces are always added to the document's root,
that means,
they have to be unique in the scope of the whole document.


=head2 mime

  print $xml->mime;

The mime type associated with the object class.
See L<Extensions|/Extensions> for further information.


=head1 EXTENSIONS

  package Fun;
  use MojoX::XML with => (
    prefix => 'fun',
    namespace => 'http://sojolicio.us/ns/fun',
    mime => 'application/fun+xml'
  );

  # Add new methods to the object
  sub add_happy {
    my $self = shift;
    my $word = shift;

    my $cool = $self->add('-Cool');
    my $cry  = uc($word) . '!!! \o/ ';
    $cool->add(Happy => {foo => 'bar'}, $cry);
  };

L<MojoX::XML> allows for inheritance
and thus provides two ways of extending the functionality:
By using a derived class as a base class or by extending a
base class with the L<extension|/extension> attribute.

For this purpose three attributes can be set when
L<MojoX::XML> is used (introduced with the keyword C<with>).

=over 2

=item C<namespace>

Namespace of the extension.

=item C<prefix>

Preferred prefix to associate with the namespace.

=item C<mime>

Mime type of the base document.

=back

You can use derived objects in your application as you
would do with any other object class.

  package main;
  use Fun;
  my $obj = Fun->new('Fun');
  $obj->add_happy('Yeah!');
  print $obj->to_pretty_xml;

  # <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  # <Fun xmlns="http://sojolicio.us/ns/fun">
  #   <Cool>
  #     <Happy foo="bar">YEAH!!!! \o/ </Happy>
  #   </Cool>
  # </Fun>

The defined namespace is introduced as the document's
namespace. The prefix is not in use for derived classes.

Without any changes to the class, you can use this module as an
extension to another L<MojoX::XML> based document as well.

  use MojoX::XML;

  my $obj = MojoX::XML->new('object');

  # Use MojoX::XML based class 'Fun'
  $obj->extension('Fun');

  # Use methods provided by the base class or any extension
  $obj->add_happy('Yeah!');

  # Print with pretty indentation
  print $obj->to_pretty_xml;

  # <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  # <object xmlns:fun="http://sojolicio.us/ns/fun">
  #   <Cool>
  #     <fun:Happy foo="bar">YEAH!!!! \o/ </fun:Happy>
  #   </Cool>
  # </object>

The defined namespace of C<Fun> is introduced with the
prefix C<fun>. The prefix is prepended to all elements
added by the C<add> method in the extension class.
To prevent this prefixing, prepend the element name with
a C<-> (like with C<Cool>).


=head1 DEPENDENCIES

L<Mojolicious>.


=head1 AVAILABILITY

  https://github.com/Akron/MojoX-XML


=head1 COPYRIGHT AND LICENSE

Copyright (C) 2011-2013, L<Nils Diewald|http://nils-diewald.de/>.

This program is free software, you can redistribute it
and/or modify it under the same terms as Perl.

=cut
